保证顺序一致性三要素：
1:将消息放到同一个队列
2:生产者生产消息顺序放到broker 的commintlog
3:消费者消费消息顺序消费

开启服务，  首先启动nameserver 然后启动broker




接口是抽象类 抽象类不可已实例化 如果在接口层加上@Service 而@Service 中包含了@Component注解,
也就意味着@Service注解的作用就是将Spring中的Bean实例化，相互矛盾。（加上也不会报错）
因此将@Service加在接口实现类上

.gitigone 忽略提交git的文件

//抽象的意义
一个对象不能具体的描述出自己的某一个特征

//接口的意义
接口就是固定一些功能，实现者必须实现这些功能并被约束
https://blog.csdn.net/whandwho/article/details/80247521?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-80247521-blog-100730804.pc_relevant_multi_platform_whitelistv3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-80247521-blog-100730804.pc_relevant_multi_platform_whitelistv3&utm_relevant_index=1


//事务问题
读未提交 读已提交 可重复度  串行读（不会幻读）
可重复读造成的幻读和其他两个造成幻读的情景不一样 （可重复读会导致两次查询结果一致，导致B事务提交的结果查不到）

/*****************************************************************************/

 实例：根据媒体查询供应商（即一条sql） 未查到 则开一个事务新增（新增的代码设置了传播机制为PROPAGATION_REQUIRES_NEW
 （它会开启一个新的事务。如果一个事务已经存在，则先将这个存在的事务挂起）），然后再查sql 结果还是没查到

 解读: spring 设置的默认隔离级别是可重复读（即在一个事务中，两次对一个数据查询中间开启一个新事物更改查询结果一致）
 spring的默认传播机制是(Propagation.REQUIRED 查询上下文如果当前没有事务则开启一个事务，如果有则加入)
 则第一次根据媒体查询供应商查询的结果是0 开启事务B新增供应商并提交（由于新增的事务传播机制为 新增的代码设置了传播机制为PROPAGATION_REQUIRES_NEW）
 则之后的查询失败引起的数据回滚并不会引起B事务的回滚（即数据库能够查到此新增的供应商数据）然后因为可重复读 则第二次查询还是再A事务中
 则返回第一次查询的结果 即0条 所以查询不到新增的供应商数据

 解决方案：思考了两个解决方案
 1：将第二此的查询开启一个新事务C（事务传播机制设置为PROPAGATION_REQUIRES_NEW ） 最开始的A事务是包含了B事务 所以才有隔离级别的问题
 此时B和C 属于顺序执行事务关系 则C能查到
  2：再A事务上设置事务隔离级别为读已提交（但由于在事务的执行中可以读取到其他事务提交的结果）则不会发成解读中前后两次查询都为0条的问题
/********************************************************************************/